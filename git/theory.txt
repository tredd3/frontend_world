********** THEORY **********
The author of Linux and git is same
Git is free and open source software for distributed version control that lets you manage and keep track of your source code history
Git is installed locally on the system, GitHub is hosted on the web
Git is maintained by linux,	GitHub is maintained by Microsoft.
GitHub (repository management) is a web-based Git repository hosting service, which offers all of the distributed revision control 
  and source code management (SCM) functionality of Git as well as adding its own features. 
You do not need GitHub to use git, but you cannot use GitHub without using git. There are many other alternatives to GitHub,
 such as GitLab, BitBucket, AWS Code Commit and “host-your-own” etc
All of these are referred to in git-speak as “remotes”, and all are completely optional.

*********** getting help ***********
git help git 
git help <subcmd>
git <subcmd> --help
man git-<subcmd>


********** Initialise a repo with git *********
1)git init 
2)add .gitignore file in the root directory
3)git add .
4)git commit -m "project push"

//config
git config --system --list  //location:  /etc/gitconfig - applicable to all repos of in a host
git config --global --list  //location: ~/.config/git/config - applicable to all repos of a user
git config --list //location: .git/config - applicable to a particular repo


************ The Architecture ***********
modified files/ Working directory
staged files/Staging Area/Index
commited files/local Repository
pushed files/remote Repository
working directory ->(add) staging area ->(commit) local Repository ->(push) remote Repository


*********** ALL Operations in git **********
//delete branches
locally: git branch -d <branch_name>
remotely: git push origin -d <branch_name>
both locally and remotely at a time: git branch -D <branch_name>

//revert commits
git log --oneline //to check the commit history
git log //to get the commit id, author , date
 git reset --soft HEAD~1 - undo the last commit by preserving the changes
 git reset --soft <commit_hash> - commit_hash where you want to get back to without losing changes 
 git reset --hard HEAD~1 - undo the last commit and discard all changes in the working directory 
 git push --force origin <commit-ish>:<the remote branch> 
 git push --force origin 4933e449dc7ea37c1bd0dbc295512e2ade3f368b:new_tabs_master_merge_sept_2022

//merging
https://git-scm.com/docs/merge-strategies
lets say u want to override code in master with changes in refactoring_branch
git pull (fetches and merges the remote branches with local branches)
git checkout master
git merge -X theirs <refactoring_branch> 

//rebasing
https://medium.com/osedea/git-rebase-powerful-command-507bbac4a234
first checkout a branch and then run the rebase command with the name of the branch you wish to rebase on to:
git checkout feature
git rebase develop/master (provided ur feature branch is cut out from it)


//gitignore existing directory
since existing directory is already cached in git we need to remove that
git rm --cached <folder_to_be_added_to_gitignore>
add the foldername to .gitignore file and then make a commit and we are good to go


********* all about tags ***********
//add tag
https://devconnected.com/how-to-create-git-tags/#:~:text=In%20order%20to%20create%20a,that%20you%20want%20to%20create.&text=As%20an%20example%2C%20let's%20say,command%20and%20specify%20the%20tagname.

//checkout tag
https://devconnected.com/how-to-checkout-git-tags/
git checkout tags/<tag> -b <branch>
git checkout tags/v1.0 -b v1.0-branch

//delete tagging 
git tag -d <tag_name>
git push --delete origin tagname
e.g: 
git tag -d v1.0
git push --delete origin v1.0

*********** useful commands ************
one unique command allowing you to query a remote repo without having to clone/fetch it first
git ls-remote -h -t https://<xyz>.git
when you do a checkout it keeps changing the head pointer
cat .git/HEAD  //tells you where head points to
git clean // clear/delete untracked files if they are unnecessarily created
git branch --show-current //get current branch name
git reflog //to show all the commits ever done by you 
