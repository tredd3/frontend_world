//WEB SECURITY
https://medium.com/@pantpriyamvada/session-management-and-security-in-spa-d96f4a9e817e
https://www.imperva.com/learn/application-security/application-security/
https://developer.mozilla.org/en-US/docs/Web
https://infosec.mozilla.org/guidelines/web_security
**use HTPS connection as encrypted data is travelling
**use strict mode so that eval is not evaluated

**sql injection
Occurs when a perpetrator uses malicious SQL code to manipulate a backend database so it reveals information.
Consequences include the unauthorized viewing of lists, deletion of tables and unauthorized administrative access.

**cross-site scripting (XSS) attacks  - Inducting malicious content into site which often includes�JavaScript but sometimes�HTML
To help mitigate  XSS HttpOnly�cookies are inaccessible to JavaScript's�Document.cookie�API .they are only sent to the server. 
For example, cookies that persist server-side sessions don't need to be available to JavaScript, and the�HttpOnly flag should be set.
Types of XSS attacks:
1)Stored XSS Attacks - The injected script is stored permanently�on the target servers. 
The victim then retrieves this malicious script from the server when the browser sends a request for data.
2)Reflected XSS Attacks - When a user is tricked into clicking a malicious link, submitting a specially crafted form,
 or browsing to�a malicious site, the injected code travels to the vulnerable website. The Web server reflects the injected 
 script�back to the user's browser,�such as in an error message, search result, or any other response that includes data sent to the server as part of the request.
3)DOM-based XSS Attacks - The payload is executed as a result of modifying the DOM environment
Solution:
1)basic: use http only cookies such that JavaScript cannot read it, but the problem is even ur js cannot read the cookie 
2)advanced: Content Security Policy (CSP) is to prevent execution of scripts and content from domains other than those mentioned in the Content-Security-Policy�HTTP header
Browsers that don't support it still work with servers that implement it, and vice-versa
To enable CSP, you need to configure your web server to return the Content-Security-Policy HTTP header. 


**cross-site request forgery attacks (CSRF) - request is made from authenticated victim's site without his notice 
The attacker can't see the responses to the forged requests, so CSRF attacks focus on state changes, not theft of data which XSS does.
SameSite�cookies let servers require that a cookie shouldn't be sent with cross-site (different  domain) requests, which provides some protection against cross-site request forgery attacks (CSRF)
Both CSRF tokens and SameSite cookies should be deployed.  A CSRF token (randomly generated) should be  sent to the server for the request to be valid
CSRF tokens should not be transmitted using cookies. 
Token validation flow:  
1)The CSRF token can be added through hidden fields in html by servers,
2)then  ur client/browser extracts that token and adds that to header and sends it back while making a request
3)server now validates the recieved CSRF token and sends the response, if token is invalid u get 403 forbidden error
For instance, including malicious HTML image elements, sending emails, asking to click ads with
underlying URL: <img src  = “https://samplebank.com/onlinebanking/transfer?amount=5000&accountNumber=425654” width=“0” height= “0”>


XSS                                VS                         CSRF
1)XSS attacks exploit the trust a user has                    CSRF attacks exploit the trust a Web application has in an 
in a particular Web application                               authenticated user.
2)XSS attacks focus on data theft                             CSRF attacks focus on state changes (sending a messge,Submitting a transaction, delete, cancel etc)
3)data is stealed from current web applicaton and is          all state change requests are made to the same app server
sent to third party(attacker) server
4)