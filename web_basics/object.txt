https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
//Objects
object is a mapping between keys and values. Keys are strings (or Symbols) and values can be anything. 
This makes objects a natural fit for hashmaps.
**methods
*Object.assign() - Copies the values of all enumerable own properties from one or more source objects to a target object.
const o1 = { a: 1, b: 1, c: 1 };
const o2 = { b: 2, c: 2 };
const o3 = { c: 3 };
var obj_array=[o1,o2,o3]
const obj = Object.assign({}, ...obj_array);
*Object.create() - Creates a new object with the specified prototype object and properties.
o = {}; // is equivalent to o = Object.create(Object.prototype);
function Constructor() {}
o = new Constructor(); // is equivalent to: o = Object.create(Constructor.prototype);
o = Object.create({}, { p: { value: 42 } });
// by default properties ARE NOT writable, enumerable or configurable:
o.p = 24;
o.p;
// 42

o.q = 12;
for (var prop in o) {
  console.log(prop);
}
// 'q'

delete o.p; //delete operator to delete the object property
// false

// to specify an ES3 property
o2 = Object.create({}, {
  p: {
    value: 42,
    writable: true,
    enumerable: true,
    configurable: true
  }
})
*Object.defineProperty() and Object.defineProperties() - Adds the named properties described by the given descriptors to an object
const object1 = {};
Object.defineProperty(object1, 'property1', {
  value: 42,
  writable: false
});
var obj = {};
Object.defineProperties(obj, {
  'property1': {
    value: true,
    writable: true
  },
  'property2': {
    value: 'Hello',
    writable: false
  }
  // etc. etc.
});
*Object.entries(obj) - Returns an array containing all of the [key, value] pairs of a given object's own enumerable string properties.
but the order of keys is not guaranteed as that of original object
const obj = { foo: 'bar', baz: 42 };
Object.entries(obj).forEach(([key, value]) => console.log(`${key}: ${value}`));
const obj = { foo: 'bar', baz: 42 }; 
const map = new Map(Object.entries(obj));
console.log(map); // Map { foo: "bar", baz: 42 }
*Object.fromEntries() - Returns a new object from an iterable of [key, value] pairs. (This is the reverse of Object.entries).
const map = new Map([ ['foo', 'bar'], ['baz', 42] ]);
const obj = Object.fromEntries(map);
console.log(obj); // { foo: "bar", baz: 42 }
const arr = [ a,b,c];
const entry=Object.Entries(arr); //[ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]
const obj = Object.fromEntries(entry);
console.log(obj); // { 0: "a", 1: "b", 2: "c" }
*Object.getOwnPropertyNames() - returns an array of all own properties (including non-enumerable properties except for those which use Symbol)
*Object.keys(obj) - Returns an array containing the names of all of the given object's own enumerable string properties.
*Object.values(obj) - Returns an array containing the values
*Object.seal(obj) - cannot delete and add properties to an object.They can only modify
*Object.freeze(obj) - cannot delete or change its properties but can add properties
*Object.preventExtensions(obj) - u cannot add but can modify or delete properties 

listening to prop change - You can usually use setters and getters or proxies instead.
**private properties on an object
A proxy essentially wraps an object and offers many ways to intercept actions performed on an object

let proxy;

{
  const favBook = Symbol('fav book');

  const obj = {
    name: 'Thomas Hunter II',
    age: 32,
    _favColor: 'blue',
    [favBook]: 'Metro 2033',
    [Symbol('visible')]: 'foo'
  };

  const handler = {
    ownKeys: (target) => {
      const reportedKeys = [];
      const actualKeys = Reflect.ownKeys(target);

      for (const key of actualKeys) {
        if (key === favBook || key === '_favColor') {
          continue;
        }
        reportedKeys.push(key);
      }

      return reportedKeys;
    }
  };

  proxy = new Proxy(obj, handler);
}

console.log(Object.keys(proxy)); // [ 'name', 'age' ]
console.log(Reflect.ownKeys(proxy)); // [ 'name', 'age', Symbol(visible) ]
console.log(Object.getOwnPropertyNames(proxy)); // [ 'name', 'age' ]
console.log(Object.getOwnPropertySymbols(proxy)); // [Symbol(visible)]

//5 ways of creating a object
var newObject = {};
// or
var newObject = Object.create( Object.prototype );
// or
var newObject = new Object();
or
var newObject=Object.assign({},a,b)
or
var newObject={...a,...b}

//4 ways of object iteration
for-in loop combined with hasOwnProperty()//order is not maintained and prototype properties are also iterated
Object.entries() and for-of loop //order is not maintained but only own properties are iterated
Object.keys() and Object.values() //best way - order is maintained and only own properties are iterated

//3 ways of object copy
iteration
Object.assign({},a,b)
json.stringify and parse //best way