//functional programming
1)Pure functions instead of shared state & side effects : optimizations by compiler
/gives same output for same arguments all the times (This can enable caching optimizations such as memoization)
/A function is said to have a side effect if it modifies some state variable value(s) outside its local environment.
/Example side effects include modifying a non-local variable, modifying a static local variable, 
modifying a mutable argument passed by reference, performing I/O, access DOM, storage, DB or calling other side-effect functions.
/If there is no data dependency between two pure expressions, their order can be reversed, or they can be performed in parallel 
2)Function composition
3)Immutability is a central concept of functional programming
An immutable object is an object that can’t be modified after it’s created //use immutable js
4)FP concepts - HOC(for reusability instead of polymorphism), function composition(instead of inheritance)
closures instead of encapsulation, currying
Higher-order functions are functions that can either take other functions as arguments or return them as results
5)Declarative rather than imperative code (what to do, rather than how to do it)
6)In functional programming things are loosely coupled but in OO things are tightly coupled.

Traditional Imperative Loop:

const numList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
let result = 0;
for (let i = 0; i < numList.length; i++) {
  if (numList[i] % 2 === 0) {
    result += (numList[i] * 10)
  }
}
Functional Programming with higher-order functions:
filter, map and reduce are HOFs as they take callback fns as inputs

const numList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
const result = numList
               .filter(n => n % 2 === 0)
               .map(a => a * 10)
               .reduce((a, b) => a + b)


//oops vs functional programming
*FP - avoids shared state & mutable data, first-class functions, higher order functions, function composition, Pure functions,Avoid side-effects
*OOP - tightly coupled, shared state, different things competing for the same resources(race condition)

//currying - functional programming concept is the idea of currying or partially applying argument values to a function
//currying - splitting up a function that takes multiple arguments (params) into a sequence of functions that each take an individual argument.
//By currying and composing your functions u r creating a pipeline for data processing.
const sum = function(a) {
  return function(b) {
    return a + b
  }
}
sum(3)(4)
// no curry
const sum = (a, b) => a + b

// curry
const sum = a => b => a + b

//non-pure functions
const name="tarak"
function print(){
  return `my name is ${name}`; //taking a external input
}

const name="tarak"
function print(){
  console.log(name) //output to external environment
}

//pure functions
function print(name){
  return `my name is ${name}`;
}



