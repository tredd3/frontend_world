oops supporting languages can be class based or prototype based

concepts:
//encapsulation - binds together the data and functions that manipulate the data

//abstraction - hide implementation by having public and private methods/properties
implement interfaces

//inheritance - code reusability

//polymorphism - same method behaves differently in different objects
overloading - compile time polymorphism
overriding - runtime polymorphism
https://www.programcreek.com/2009/02/overriding-and-overloading-in-java-with-examples/#:~:text=Overloading%20occurs%20when%20two%20or,(i.e.%2C%20method%20signature).


//SOLID principles
https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design

Single-responsibility principle
A class should only have a single responsibility, that is, only changes to one part of the software's specification should be able to affect the specification of the class.
Openâ€“closed principle
"Software entities ... should be open for extension, but closed for modification."
Liskov substitution principle
"Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program." See also design by contract.
Interface segregation principle
"Many client-specific interfaces are better than one general-purpose interface."
Dependency inversion principle
One should "depend upon abstractions, [not] concretions.