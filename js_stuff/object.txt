https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
//Objects
object is a mapping between keys and values. Keys are strings (or Symbols) and values can be anything. 
This makes objects a natural fit for hashmaps.
**methods
*Object.assign() - Copies the values of all enumerable own properties from one or more source objects to a target object.
*Object.create() - Creates a new object with the specified prototype object and properties.
*Object.entries() - Returns an array containing all of the [key, value] pairs of a given object's own enumerable string properties.
const obj = { foo: 'bar', baz: 42 };
Object.entries(obj).forEach(([key, value]) => console.log(`${key}: ${value}`));
const obj = { foo: 'bar', baz: 42 }; 
const map = new Map(Object.entries(obj));
console.log(map); // Map { foo: "bar", baz: 42 }
*Object.fromEntries() - Returns a new object from an iterable of [key, value] pairs. (This is the reverse of Object.entries).
const map = new Map([ ['foo', 'bar'], ['baz', 42] ]);
const obj = Object.fromEntries(map);
console.log(obj); // { foo: "bar", baz: 42 }
*Object.getOwnPropertyNames() - returns an array of all own properties (including non-enumerable properties except for those which use Symbol)
*Object.keys() - Returns an array containing the names of all of the given object's own enumerable string properties.
*Object.values() - Returns an array containing the values
*Object.seal(obj) - Prevents other code from deleting and adding properties to an object.They can only modify
*Object.freeze(obj) - Freezes an object. Other code cannot delete or change its properties but can add properties
*Object.preventExtensions(obj) method prevents new properties from ever being added to an object 
 
**private properties on an object
A proxy essentially wraps an object and offers many ways to intercept actions performed on an object

let proxy;

{
  const favBook = Symbol('fav book');

  const obj = {
    name: 'Thomas Hunter II',
    age: 32,
    _favColor: 'blue',
    [favBook]: 'Metro 2033',
    [Symbol('visible')]: 'foo'
  };

  const handler = {
    ownKeys: (target) => {
      const reportedKeys = [];
      const actualKeys = Reflect.ownKeys(target);

      for (const key of actualKeys) {
        if (key === favBook || key === '_favColor') {
          continue;
        }
        reportedKeys.push(key);
      }

      return reportedKeys;
    }
  };

  proxy = new Proxy(obj, handler);
}

console.log(Object.keys(proxy)); // [ 'name', 'age' ]
console.log(Reflect.ownKeys(proxy)); // [ 'name', 'age', Symbol(visible) ]
console.log(Object.getOwnPropertyNames(proxy)); // [ 'name', 'age' ]
console.log(Object.getOwnPropertySymbols(proxy)); // [Symbol(visible)]

//3 ways of creating a object
var newObject = {};
// or
var newObject = Object.create( Object.prototype );
// or
var newObject = new Object();

//