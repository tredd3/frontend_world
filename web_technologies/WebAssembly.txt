
//WebAssembly - official fourth language on the web alongside javascript HTML and CSS
https://blog.logrocket.com/webassembly-how-and-why-559b7f96cd71/
**use cases:
This enables the use of pre-compiled executables for performance-critical portions of page scripts.
for e.g: achieving performance of a native video games and audio application in the browser is hard 
that is where web assembly pitches in.

**about
/WebAssembly, or wasm for short, is a low-level bytecode format that runs in the browser just like JavaScript.
/It is designed to be faster to parse than JavaScript, as well as faster to execute.
/as of now C, C++ and Rust can compile to web assembly
/You do not write WebAssembly, you compile other higher level languages like C, C++ or Rust code and compile it into what is called a WebAssembly module.
/it has a textual format that’s easy to read (.wat), but binary representation is what you actually deliver to the browser (.wasm).
/WebAssembly was designed for speed. Its binaries are much smaller than textual JavaScript files. Because of their size, 
they are faster to download and this is especially important on slow networks/ high latency networks
/inter-operable: You can call WebAssembly functions in JavaScript code and you can call JavaScript functions
 in WebAssembly modules, but as of now passing data between wasm and js is not straight forwared.
/Better to think of WebAssembly as a system that runs well in isolation and use it to offload big chunks of work.


**execution in the browser
You can load that into your web application and call it from JavaScript. It runs in the same sandbox 
as regular JavaScript code (It’s not a replacement for JavaScript, it’s a compliment to JavaScript allowing 
us to build an even greater variety of applications and more importantly better quality applications as good as any desktop app)
/JavaScript code(text) - parse(abstract syntax tree), compile and optimize it
/WASM(binary) - decode and compile because Most of the optimization happens during the compilation of source code, before it even gets into the browser.
/In WebAssembly there is only one compilation step and your app will run in every modern browser.
browser takes care of converting WebAssembly code to executable code on the processor
/Until now, JavaScript has been the only fully supported language in web browsers. With WebAssembly, web developers will be able to choose other
languages and more developers will be able to write code for the web.
