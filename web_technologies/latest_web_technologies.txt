
https://blog.pramp.com/how-to-succeed-in-a-frontend-interview-d748cb073823
https://codeburst.io/de-coding-the-front-end-development-interview-process-9601bc4c71e5
https://medium.com/capital-one-tech/why-everyone-is-talking-about-isomorphic-universal-javascript-and-why-it-matters-38c07c87905
https://medium.com/@yej.arin.choi/this-is-a-post-that-summarizes-my-dive-into-immutability-in-programming-what-it-is-why-its-34cbba44f889
https://2ality.com/2015/01/es6-maps-sets.html

//PWA
https://www.youtube.com/watch?v=DfFlBWCQjzA&list=RDCMUCnUYZLuoy1rq1aVMwx4aTzw&start_radio=1&rv=DfFlBWCQjzA
https://developers.google.com/web/progressive-web-apps/


//push notifications�can appear anytime, in-app notifications�only appear while someone is using the�app
//An iframe is used to display a web page within a web page.

//SEO - process of increasing website traffic by putting ur site on the top web search engine results
*extremely imp for business to convert visitors to customers
*Cloaking - content given to browsers is diff from that given to search crawlers
let's say the page is full of videos and the user is searching for the content present in he video.
now the search engines cannot go and search inside the video. so we need to put the content into a separate file so that web crawlers can read it
*progressive enhancement: allows everyone to access the basic content and functionality of a web page, using any browser or Internet connection, 
while also providing an enhanced version of the page to those with more advanced browser software or greater
*header and semantic tags
*leverage meta tags by adding the content - must for SPA's as the content is generated only on the 
client side and crawler has no content to search on 
*server side rendering

Static assets: Assets which you don�t create  dynamically with server-side code. e.g: html, js, css, images etc

https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers

Service worker: proxy server , which intercepts your network request 
served over HTTPS so we know the service worker the browser receives hasn't been tampered with during its journey through the network.
It is specific to origin . Multiple js files in an origin can use the data/service provided by the service worker.
It is event driven and It is designed to be fully async hence it uses promises heavily .
it's a replacement for APP cache and covers all it's loop holes.
A service worker is run in a worker context: it therefore has no DOM access, and runs on a different thread different from the main JavaScript thread, so it is not blocking. 
 it can't access the DOM directly. Instead, a service worker can communicate with the pages it controls by responding to messages sent via the postMessage interface, and those pages can manipulate the DOM if needed.
Cache storage API- Provides a master directory of all the named caches that can be accessed by a ServiceWorker
used for caching static assets, network requests
Service workers are also intended to be used for such things as:
* Background data Synchronization(web to server and vice versa) Start up a service worker even when no users are at the site, so caches can be updated,
* Responding to resource requests from other origins.
* Receiving Centralized updates to expensive-to-calculate data such as geolocation or gyroscope, so multiple pages can make use of one set of data.
* Push notifications handling
* offline experiences (by serving files from cache)
* Performance enhancements, for example pre-fetching resources that the user is likely to need in the near future, such as the next few pictures in a photo album
* service workers will be able to do a number of other useful things for the web platform that will bring it closer towards native app viability.
//Updating your service worker
If your service worker has previously been installed, but then a new version of the worker is available on refresh or page load, 
the new version is installed in the background, but not yet activated. It is only activated when there are no longer any pages 
loaded that are still using the old service worker. As soon as there are no more such pages still loaded, the new service worker activates.
//It's terminated when not in use, and restarted when it's next needed. If there is information that you need to persist and reuse across restarts, service workers do have access to the IndexedDB API.


memoization or Memoisation is an Optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again.
Immutable.js�is a data structure library built by Facebook to work with React � and it uses Structural Sharing(reduces time and space in copying nested data structures)
Numbers ,strings are are also immutable structures�
Let x=4
Let y=x (value is copied)
x=8
//y=4
//x=8
Array, object, function, class, maps, sets are mutable 
Let u ={d:8,k:9}
Let v=u (v references  u but the object is not copied )

Why immutable.js???
If you use Immutability, you are always creating a copy of the old data structure and applying the changes to the copy instead of changing the original data structure!
In Redux we do the same thing. But if you had multiple nested levels of objects/arrays then immutable.js comes to help
1)Easier to Debug : immutability stresses removing all side-effects and using�pure functions
2)Easier Deep Value Comparisons: you can just compare the memory locations of the data structures to see if their values are the same or not (instead of having to traverse deeply into the data structure)
3)easier to manage concurrency (without locks or snapshots)
Immutable.fromJS()method converts any nested object/array into Immutable Map/List

Isomorphism - rendering pages on both the server and client side. It usually implies the use of JavaScript and Node.js/Io.js because they allow for the re-use of libraries.
Whenever you visit a website, your browser makes a request to the server that contains the contents of the website.�The request depends on multiple factors
* 		Your internet speed
* 		the location of the server
* 		how many users are trying to access the site
* 		and how optimized the website is, to name a few
isomorphism address the issues of SEO, performance, and maintainability

Server side rendering pros:
* Search engines can crawl the site for better SEO as the content is already present.
* The initial page load is faster and aft
* Great for static sites.
* Used for campaigns and marketting as the content is controllable from server
Server-side cons:
* Frequent server requests.
* Full page reloads.
* Non-rich site interactions.

Client-side pros:
* get the skeleton from server and dynamically render content using react/ js
* Fast website rendering after the initial load.

Client-side cons:
* Low SEO if not implemented correctly. (Use metatags)
* Initial load might require more time bcoz of use of  an external library.


https://www.altexsoft.com/blog/soap-vs-rest-vs-graphql-vs-rpc/
//GraphQL - A query language for your API
GraphQL has three main characteristics:
It lets the client specify exactly what data it needs.
It makes it easier to aggregate data from multiple sources.
It uses a type system to describe data.

*GraphQL on the other hand is like having a personal assistant: 
In other words, GraphQL establishes a standard language for talking to this magical personal assistant.
*GraphQL API is organized around three main building blocks: the schema, queries, and resolvers.
Queries - The request you make to your GraphQL personal assistant is the query
Resolver - tells GraphQL how and where to fetch the data corresponding to a given field.

*While typical REST APIs require loading from multiple URLs, GraphQL APIs get all the data your app needs in a single request. 
Apps using GraphQL can be quick even on slow mobile network connections.


//WebAssembly - official fourth language on the web alongside javascript HTML and CSS
https://blog.logrocket.com/webassembly-how-and-why-559b7f96cd71/
**use cases:
This enables the use of pre-compiled executables for performance-critical portions of page scripts.
for e.g: achieving performance of a native video games and audio application in the browser is hard 
that is where web assembly pitches in.

**about
/WebAssembly, or wasm for short, is a low-level bytecode format that runs in the browser just like JavaScript.
/It is designed to be faster to parse than JavaScript, as well as faster to execute.
/as of now C, C++ and Rust can compile to web assembly
/You do not write WebAssembly, you compile other higher level languages like C, C++ or Rust code and compile it into what is called a WebAssembly module.
/it has a textual format that’s easy to read (.wat), but binary representation is what you actually deliver to the browser (.wasm).
/WebAssembly was designed for speed. Its binaries are much smaller than textual JavaScript files. Because of their size, 
they are faster to download and this is especially important on slow networks/ high latency networks
/inter-operable: You can call WebAssembly functions in JavaScript code and you can call JavaScript functions
 in WebAssembly modules, but as of now passing data between wasm and js is not straight forwared.
/Better to think of WebAssembly as a system that runs well in isolation and use it to offload big chunks of work.


**execution in the browser
You can load that into your web application and call it from JavaScript. It runs in the same sandbox 
as regular JavaScript code (It’s not a replacement for JavaScript, it’s a compliment to JavaScript allowing 
us to build an even greater variety of applications and more importantly better quality applications as good as any desktop app)
/JavaScript code(text) - parse(abstract syntax tree), compile and optimize it
/WASM(binary) - decode and compile because Most of the optimization happens during the compilation of source code, before it even gets into the browser.
/In WebAssembly there is only one compilation step and your app will run in every modern browser.
browser takes care of converting WebAssembly code to executable code on the processor
/Until now, JavaScript has been the only fully supported language in web browsers. With WebAssembly, web developers will be able to choose other
languages and more developers will be able to write code for the web.


//web components - suite of different technologies allowing you to create reusable custom elements 
web components are imperative(u explicitly iterate on DOM) but react components are declarative
you are free to use React in your Web Components, or to use Web Components in React

*There is a max limit for increasing capacity of a single system
https://www.html5rocks.com/en/tutorials/webrtc/basics/
//WebRTC (Web Real-Time Communication) - real time transfer of audio, video and text
*It allows audio and video communication to work inside web pages by allowing direct peer-to-peer communication,
 eliminating the need to install plugins or download native apps
*part of W3C standards - implemented by all browsers
*WebRTC has applications for non-browser devices, including mobile platforms and IoT devices
*Major components of WebRTC include several JavaScript APIs:
*getUserMedia acquires the audio and video media (e.g., by accessing a device's camera and microphone).[19]
*RTCPeerConnection enables audio and video communication between peers. It performs signal processing, codec handling, peer-to-peer communication, security, and bandwidth management.[20]
*RTCDataChannel allows bidirectional communication of arbitrary data between peers. It uses the same API as WebSockets and has very low latency.[21]
The WebRTC API also includes a statistics function:
getStats allows the web application to retrieve a set of statistics about WebRTC sessions

//WebGL (Web Graphics Library) is a JavaScript API for rendering high-performance interactive 3D and 2D graphics within any compatible web browser without the use of plug-ins.
*can be used inside HTML5 canvas elements 
*The <canvas> element is also used by the Canvas API to do 2D graphics on web pages.
*all the graphics are handled by GPU


****** JSON 5 *********
https://spec.json5.org/#arrays
file format: file xyz.json, new file xyz.json5
usage: https://www.npmjs.com/package/json5
The JSON5 Data Interchange Format (JSON5) is a superset of JSON that aims to alleviate some of the limitations of JSON by expanding its syntax
Summary of Features
The following ECMAScript 5.1 features, which are not supported in JSON, have been extended to JSON5.
Objects:
Object keys may be an ECMAScript 5.1 IdentifierName.
Objects may have a single trailing comma.
Arrays:
Arrays may have a single trailing comma.
Strings:
Strings may be single quoted.
Strings may span multiple lines by escaping new line characters.
Strings may include character escapes.
Numbers:
Numbers may be hexadecimal.
Numbers may have a leading or trailing decimal point.
Numbers may be IEEE 754 positive infinity, negative infinity, and NaN.
Numbers may begin with an explicit plus sign.
Comments:
Single and multi-line comments are allowed.
White Space
Additional white space characters are allowed.

Example (Informative)
{
  // comments
  unquoted: 'and you can quote me on that',
  singleQuotes: 'I can use "double quotes" here',
  lineBreaks: "Look, Mom! \
No \\n's!",
  hexadecimal: 0xdecaf,
  leadingDecimalPoint: .8675309, andTrailing: 8675309.,
  positiveSign: +1,
  trailingComma: 'in objects', andIn: ['arrays',],
  "backwardsCompatible": "with JSON",
}