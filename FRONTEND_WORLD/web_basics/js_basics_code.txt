//This in js - call, apply and bind to the rescue
As a DOM event handler - set to the element on which the listener is placed //this === e.currentTarget
As a constructor - this is bound to the new object being constructed.
object method - this is set to the object the method is called on.
arrow function - this is permanently bound to the this of its enclosing function.
global execution context (outside of any function), this refers to the global object whether in strict mode or not.
random function - this refers to window and undefined in strict mode
function f2() {
  'use strict'; // see strict mode
  return this;
}
f2() === undefined; // true

var o = {
  prop: 37,
  f: function() {
    return this.prop;
  }
};
console.log(o.f()); // 37

var o = {prop: 37};
function independent() {
  return this.prop;
}
o.f = independent;
console.log(o.f()); // 37

var o = {f: function() { return this.a + this.b; }};
var p = Object.create(o);
p.a = 1;
p.b = 4;

console.log(p.f()); // 5

var obj = {
  bar: function() {
    var x = (() => this);
    return x;
  }
};
var fn = obj.bar();
console.log(fn() === obj); // true
var fn2 = obj.bar;
console.log(fn2()() == window); 

function f() {
  return this.a;
}
var g = f.bind({a: 'azerty'});
console.log(g()); // azerty
var h = g.bind({a: 'yoo'}); // bind only works once!
console.log(h()); // azerty

//Array.from and [...arr] creates a new array but only shallow copies elements
//Deep Clone
let a = [{ x: { z: 1 }, y: 2 }];
let b = JSON.parse(JSON.stringify(a));
b[0].x.z = 0
console.log(JSON.stringify(a)); //[{"x":{"z":1},"y":2}]
console.log(JSON.stringify(b)); // [{"x":{"z":0},"y":2}]


//Object.assign and Object.create creates a new object but only shallow copies elements
// Deep Copy
let a = { x: { z: 1 }, y: 2 };
let b = JSON.parse(JSON.stringify(a));
b.x.z = 0

console.log(JSON.stringify(a)); // {"x":{"z":1},"y":2}
console.log(JSON.stringify(b)); // {"x":{"z":0},"y":2}

//JSON.stringify() uses
1: The second argument (Array)
console.log(JSON.stringify(product,[‘name’]);
//RESULT {"name" : "Cake"}

2: The second argument (Function)
const user = {
 “name” : “Prateek Singh”,
 “age” : 26
}
JSON.stringify(user,(key,value)=>{
    if(typeof value==='string') return undefined
    return value;
})
// Result { "age" : 26 }

3: The third argument as Number
Note: '--' represnts the spacing for understanding purpose
JSON.stringify(user, null, 2);
//{
//--"name": "Prateek Singh",
//--"age": 26,
//--"country": "India"
//}

4: The third argument as String
If the third argument is a string, it will be used instead of the space character as displayed above.
JSON.stringify(user, null,'**');
//{
//**"name": "Prateek Singh",
//**"age": 26,
//**"country": "India"
//}

5: The toJSON method
We have one method named toJSON which can be a part of any object as its property. 
JSON.stringify returns the result of this function and stringifies it instead of converting the whole object into the string.
const user = {
 firstName : "Prateek",
 lastName : "Singh",
 age : 26,
 toJSON() {
    return { 
      fullName: `${this.firstName} + ${this.lastName}`
    };
}
console.log(JSON.stringify(user));
RESULT
// "{ "fullName" : "Prateek Singh"}"
