

*Strict mode applies to entire scripts or to individual functions. It doesn't apply to block statements enclosed in {} braces; attempting to apply it to such contexts does nothing
*concatenating a strict mode script with a non-strict mode script: the entire concatenation looks strict! 
*Strict mode intentionally has different semantics from normal code. Browsers not supporting
 strict mode will run strict mode code with different behavior from browsers that do so.
strict mode is supported in certain browsers and specific versions 
*Strict mode code and non-strict mode code can coexist
*Strict mode changes both syntax and runtime behavior.

//Strict mode makes several changes to normal JavaScript semantics:
Eliminates some JavaScript silent errors by changing them to throw errors.
'use strict';
var o = { p: 1, p: 2 }; // !!! syntax error
mistypeVariable = 17; // ReferenceError
eval of strict mode code does not introduce new variables into the surrounding scope. In normal code eval("var x;") introduces a variable x into the surrounding function or the global scope
function fun() { return this; }
console.assert(fun() === undefined);// so that 3rd party users script cannot access the global scope
Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that's not strict mode.
Prohibits some syntax likely to be defined in future versions of ECMAScript.
keywords reserved for furture releases: implements, interface, let, package, private, protected, public, static, and yield. In strict mode, then, you can't name or use variables or arguments with these names.

// Whole-script strict mode syntax
'use strict';
var v = "Hi! I'm a strict mode script!";


// Strict mode for functions
function strict() {
  // Function-level strict mode syntax
  'use strict';
  function nested() { return 'And so am I!'; }
  return "Hi!  I'm a strict mode function!  " + nested();
}
function notStrict() { return "I'm not strict."; 


// Strict mode for es6 odules
function strict() {
    // because this is a module, I'm strict by default
}
export default strict;