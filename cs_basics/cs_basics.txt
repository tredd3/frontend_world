//factors
perfect squares - odd factors
others - even factors

//32 bit vs 64 bit
there exist two type processor i.e., 32-bit and 64-bit. These processor tells us how much memory a processor can have access from a CPU register
32 bits can refer max 2^32 bytes of memory addresses= 4GB RAM
any system having more than 4GB RAM should use 64 bit processor else RAM > 4GB gets watsed as the processor can't access it.
speed of computation: 64-bit processors can come in dual core, quad core, six core, and eight core versions


//compiler vs interpreters
Compiler: all the source code is converted to binary and then executable file is executed
compiler is primarily used for programs that translate source code from a high-level programming language
 to a lower level/any intermediate language (e.g., assembly language, byte code, or machine code)
pros: speed(compiled code can be optimized before execution), sorce code is private (binary/executable file
 is downloaded by outside world)
cons: not cross platform(separate binary files based on OS/CPU), speed of development is less as debugging requires
the developer to compile the complete code every time before you run it. 
solution: convert souce code to byte code instead of machine code(so that it is portable and platform independent)
- ship the byte code - then use a software like JVM(JIT compiler+interpreter) on the consumer system to 
convert it into platform dependent machine code.
JIT(just in time) compiler - takes in the byte code and adds further optimisation for repeated code by marking them as repeated, 
interpreter is going to store the binary code for the repeated byte code in the memory and next time it 
encounters the repeated byte code instead of converting it in to binary it picks it up from memory


Interpreter: source code is downloaded - each line is converted to binary and executed immediately by the processor
interpreted code requires an interpreter to run. Therefore, without an interpreter, the source code serves as a plain text file rather than an executable program. 
executable file - binary code that code can be executed directly by the computer's processor, .exe(windows), .app(mac)
Additionally, programs written for an interpreter may not be able to use built-in system functions or access hardware resources like compiled programs can.
Therefore, most software applications are compiled rather than interpreted.
pros: cross platform(single source code file is distributed independent of the machine), speed development
cons: slower(bcoz we need to wait for a line conversion to binary and then execute), 
public source code (as u ship the source file instead of binary)

e.g of source code to machine code conversion:
compiled languages: C,C++
interpreted languages: JAVASCRIPT
compiled + interpreted: Java, Python


//bytecode vs assembly code
Both bytecode and assembly language  and  "intermediate languages" that fall between source code and machine code. 
The primary difference between the two is that bytecode is generated for a virtual machine (software), 
while assembly language is created for a CPU (hardware)
assembly language, machine code - generated specific to processor and OS(platform dependent)
Assembly code can be converted to machine code using an assembler.


//environment variables
https://medium.com/chingu/an-introduction-to-environment-variables-and-how-to-use-them-f602f66d15fa
1)An environment variable is a variable whose value is set outside the program, typically through 
functionality built into the operating system or microservice.
2)During application initialization/runtime, these are loaded into process.env and accessed in the program 
using command process.env.<env_variable>
3)The primary use case for environment variables is to limit the need to modify and re-release an application due to changes in configuration data
note: it  make your app easier to configure by separating infrequently changing data from your code
4)Use cases for environment variables include but are not limited to data such as:
Execution mode (e.g., production, development, staging, etc.)
Domain names
API URL/URI’s
Public and private authentication keys (only secure in server applications)
Group mail addresses, such as those for marketing, support, sales, etc.
Service account names
5)Management and manipulation of environment variables differ from operating system to operating system.
One way to minimize these differences is to use the cross-env NPM package which provides an operating 
system independent POSIX-compatible command to set environment variables.
Portable Operating System Interface (POSIX) is a family of standards specified by the IEEE Computer Society
for maintaining compatibility between operating systems


//support for env_variables in the frontend - https://www.npmjs.com/package/dotenv
1)Support for using environment variables in frontend applications isn’t an “out-of-the-box” feature of either the browser or Javascript;
a package like dotenv is required to enable it. For the record, both frontend and backend applications may utilize dotenv.
2)many popular packages such as Create React App (react-scripts), Gatsby, GraphQL CLI, Node Lambda, and more already include dotenv.
In the case of Create React App, there is no need to call dotenv.config() since node_modules/react-scripts/config/env.js 
automatically populates process.env with the contents of the .env file
3)using webpack:
Although webpack implements support for using environment variables it’s as an option of the webpack command.
 For example webpack --env.NODE_ENV=local
they are referenced in webpack configuration files (e.g., webpack.config.js) as env. suffixed by the environment variable name. For example, console.log(env.NODE_ENV)
webpack configuration files may also reference environment variables defined by the operating system using process.env just like any other Javascript module

//more on env variables 
Environment variables are variables that are available system-wide and are inherited by all spawned child processes and shells.
Shell variables are variables that apply only to the current shell instance. Each shell such as zsh and bash, has its own set of internal shell variables.
https://linuxize.com/post/how-to-set-and-list-environment-variables-in-linux/
printenv – The command prints all or the specified environment variables.
set – The command sets or unsets shell variables. When used without an argument it will print a list of all variables including environment and shell variables, and shell functions.
unset – The command deletes shell and environment variables.
export – The command sets environment variables temporarily for a given session.
You can also use the echo command to print a shell variable. For example, to print the value of the BASH_VERSION variable you would run:
echo $BASH_VERSION
e.g:
MY_VAR='Linuxize'  //shell variabe
echo $MY_VAR   //print the shell variable
export MY_VAR   //export the shell variable as an environment variable
printenv MY_VAR   //print the env variable
export MY_NEW_VAR="My New Var"  //set environment variables in a single line: