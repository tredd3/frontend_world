/node courses
https://www.youtube.com/watch?v=TlB_eWDSMt4
https://codewithmosh.com/p/the-complete-node-js-course


//NODE JS - running js outside browser environment
node is a C++ program which includes V8 (Chrome JavaScript engine)
event-driven, non-blocking I/O model that makes it lightweight and efficient
perfect for data-intensive real-time applications that run across distributed devices
Node.js frameworks -  express, sails
Asynchronous	- code that not running at same time or with same speed
Package - bunch of modules
Socket.io is  web socket library 
https://www.sitepoint.com/build-a-simple-web-server-with-node-js/
used in projects : real time(chat, live updates), scalable, data intensive, REST API(microservice)
not to be used in projects: cpu intensive


//V8 Engine
V8 first generates an abstract syntax tree with its own parser. 
Then, Ignition, the V8 interpreter, generates bytecode from this syntax tree using the internal V8 bytecode format
TurboFan is the V8 optimizing compiler, it takes this bytecode and generates machine code from it.
V8 compiles JavaScript directly to native machine code using just-in-time compilation before executing it. 
The compiled code is additionally optimized (and re-optimized) dynamically at runtime
JIT compilation combines the speed of compiled code with the flexibility of interpretation


//node syntax
/REPL - read eval printloop - virtual env to run js in terminal (type node and press enter in terminal to open REPL)
/global instead of window object
/every file is a module. all the vars and fns defined in a module is available only inside it
/module.exports is {} 
/ngnix vs node 
*node provides ssl encryption, gzip, web server and other functionalties which ngnix provides.
but ngnix takes less amount of time and space to perform these ops compared to node
*node app should focus on business logic and all these genric functionalty overhead should be
given to proxy server 
*we can also configure organisation level configuration in ngnix instead of rewriting and 
maintaining at application level.
//for debugging
use debugger in the code and run node inspect <file_name>
//log files in node
node --trace-events-enabled --trace-event-categories v8,node server.js
Running Node.js with tracing enabled will produce log files that can be opened in the chrome://tracing tab of Chrome.
https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/
/setImmediate() is designed to execute a script once the current poll phase of event loop completes.
/process.nextTick() technically not part of the event loop. Instead, the nextTickQueue will be processed after 
the current operation in stack completes, regardless of the current phase of the event loop.
all callbacks passed to process.nextTick() will be resolved before the event loop continues.
/The main advantage to using setImmediate() over setTimeout() is setImmediate() will always be executed
 before any timers if scheduled within an I/O cycle, independently of how many timers are present.
