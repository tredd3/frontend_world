//YARN vs NPM
https://stackshare.io/stackups/npm-vs-yarn
*YARN by facebook to overcome shortcomings of NPM
*NPM installs all and every package from npmjs.com which hinders accessibility in the event that one goes down, 
Yarn, on the other hand, installs from multiple repositories npmjs.com as well as Bower
*Yarn caches every package it downloads so it never needs to again.NPM downloads the packages everytime u run npm install
*Yarn is fast bcoz of parallel downloading of packages Npm downloads packages sequentially

//GraphQL - A query language for your API
GraphQL has three main characteristics:
It lets the client specify exactly what data it needs.
It makes it easier to aggregate data from multiple sources.
It uses a type system to describe data.

*GraphQL on the other hand is like having a personal assistant: 
In other words, GraphQL establishes a standard language for talking to this magical personal assistant.
*GraphQL API is organized around three main building blocks: the schema, queries, and resolvers.
Queries - The request you make to your GraphQL personal assistant is the query
Resolver - tells GraphQL how and where to fetch the data corresponding to a given field.

*While typical REST APIs require loading from multiple URLs, GraphQL APIs get all the data your app needs in a single request. 
Apps using GraphQL can be quick even on slow mobile network connections.

//REACT(library) VS ANGULAR(framework-MVC archiecture) VS VUE
REACT - virtual DOM
Built for large and complex web apps 
HTML ,CSS and JS all clubbed in to one component
Virtual DOM - only updating parts of the DOM that changed instead of rendering the whole DOM
React hooks lets you use every important feature of React � server-side rendering, accessibility, concurrent mode, and suspense � all without writing a class.
React doesn't deep compare and hence never mutate state or props | Immutable data cannot be changed once created
https://hackernoon.com/how-immutable-data-structures-e-g-immutable-js-are-optimized-using-structural-sharing-e4424a866d56
VUE - 
Easy to learn, lightweight, integration in the existing	projects, excellent documentation, virtual DOM, security, separation of HTML,CSS and JS
ideal for startups and can also be used for large web apps
Vue has official packages for state management, routing, or server-side rendering. unlike React where u are free to use anything
1)Angular - Everything is available inbuilt. In react u can choose from many options(flexibility)
2)two-way data binding(data mutable) vs unidirecional flow(immutable data)
3)REACT(library) VS ANGULAR(framework)
4)REACT(virtual DOM) VS ANGULAR(real DOM)
5)React requires a set of tools to perform different types of testing.
The testing and debugging for a complete angular project is possible with a single tool.
**both are component based and used for creating SPAs/MPAs


//java vs node
*Node.js is NOT a programming language. It is also not a framework. Node.js is an open-source, cross-platform JavaScript (JS) run-time environment that executes JavaScript code outside of a browser
*Node is for simple, fast and scalable and real-time applications. Java is for highly complex and concurrent apps.
*Node for I/O-intensive apps that include a lot of disk or network access, therefore we can serve more clients, without the need of throwing more hardware.
 And that is why Node applications are highly scalable.
*Node shouldn�t be used for CPU-intensive applications (video encoding, image manipulation service etc.) as it is single threaded (worker threads can help)
*Java is platform independent due to the so-called Java Virtual Machine � the environment where Java code is executed.
Node.js has modules that are tied to the operating system. When you need the software to run on another platform, you will have to rebuild the modules, so that they are compatible with the new OS.

//monolithic vs Microservices
*Microservices are frequently deployed on their own virtual machines - loosely coupled(independent of other services)
parallel development - each service has its own database - can be reused in other projects
scalable - e.g u have profile, analytics and chat service in ur system. if people are using more of
the chat service then we can scale(horizontally scalaing) i.e add more chat servers
A monolithic architecture - app is written as one cohesive unit of code - tighly coupled,
sharing the same memory space and resources - frequent deployments - rigrous testing
if something fails enire system fails


//CDN vs Cloud computing
**CDN is simply a network of servers that replicate your binary files so that they are served from geographically close locations. 
CDN has been around for a lot longer than cloud computing as you know it today.
Not every cloud provider is a CDN, and not every CDN is a cloud computing provider.
**Cloud computing is simply - dividing up a large computing resource (usually processing power) into little chunks which you can use remotely.


//WebAssembly - official fourth language on the web alongside javascript HTML and CSS
https://blog.logrocket.com/webassembly-how-and-why-559b7f96cd71/
**use cases:
This enables the use of pre-compiled executables for performance-critical portions of page scripts.
for e.g: achieving performance of a native video games and audio application in the browser is hard 
that is where web assembly pitches in.

**about
/WebAssembly, or wasm for short, is a low-level bytecode format that runs in the browser just like JavaScript.
/It is designed to be faster to parse than JavaScript, as well as faster to execute.
/as of now C, C++ and Rust can compile to web assembly
/You do not write WebAssembly, you compile other higher level languages like C, C++ or Rust code and compile it into what is called a WebAssembly module.
/it has a textual format that’s easy to read (.wat), but binary representation is what you actually deliver to the browser (.wasm).
/WebAssembly was designed for speed. Its binaries are much smaller than textual JavaScript files. Because of their size, 
they are faster to download and this is especially important on slow networks/ high latency networks
/inter-operable: You can call WebAssembly functions in JavaScript code and you can call JavaScript functions
 in WebAssembly modules, but as of now passing data between wasm and js is not straight forwared.
/Better to think of WebAssembly as a system that runs well in isolation and use it to offload big chunks of work.


**execution in the browser
You can load that into your web application and call it from JavaScript. It runs in the same sandbox 
as regular JavaScript code (It’s not a replacement for JavaScript, it’s a compliment to JavaScript allowing 
us to build an even greater variety of applications and more importantly better quality applications as good as any desktop app)
/JavaScript code(text) - parse(abstract syntax tree), compile and optimize it
/WASM(binary) - decode and compile because Most of the optimization happens during the compilation of source code, before it even gets into the browser.
/In WebAssembly there is only one compilation step and your app will run in every modern browser.
browser takes care of converting WebAssembly code to executable code on the processor
/Until now, JavaScript has been the only fully supported language in web browsers. With WebAssembly, web developers will be able to choose other
languages and more developers will be able to write code for the web.


//web components - suite of different technologies allowing you to create reusable custom elements 
web components are imperative(u explicitly iterate on DOM) but react components are declarative
you are free to use React in your Web Components, or to use Web Components in React

*There is a max limit for increasing capacity of a single system
https://www.html5rocks.com/en/tutorials/webrtc/basics/
//WebRTC (Web Real-Time Communication) - real time transfer of audio, video and text
*It allows audio and video communication to work inside web pages by allowing direct peer-to-peer communication,
 eliminating the need to install plugins or download native apps
*part of W3C standards - implemented by all browsers
*WebRTC has applications for non-browser devices, including mobile platforms and IoT devices
*Major components of WebRTC include several JavaScript APIs:
*getUserMedia acquires the audio and video media (e.g., by accessing a device's camera and microphone).[19]
*RTCPeerConnection enables audio and video communication between peers. It performs signal processing, codec handling, peer-to-peer communication, security, and bandwidth management.[20]
*RTCDataChannel allows bidirectional communication of arbitrary data between peers. It uses the same API as WebSockets and has very low latency.[21]
The WebRTC API also includes a statistics function:
getStats allows the web application to retrieve a set of statistics about WebRTC sessions

//WebGL (Web Graphics Library) is a JavaScript API for rendering high-performance interactive 3D and 2D graphics within any compatible web browser without the use of plug-ins.
*can be used inside HTML5 canvas elements 
*The <canvas> element is also used by the Canvas API to do 2D graphics on web pages.
*all the graphics are handled by GPU
