/ SESSION MANAGEMENT
https://medium.com/lightrail/getting-token-authentication-right-in-a-stateless-single-page-application-57d0c6474e3
https://stormpath.com/blog/token-auth-spa
https://www.appfoundry.be/blog/2018/11/24/session-management-in-react-single-page-applications/
Traditionally using cookies but ur app is vulnerable to XSS and CSRF attacks.
Also Cookies are primarily designed for web browsers and not for other types of clients such as native mobile applications or desktop programs.
Other limitations�are size of the cookie and access to user to for disabling, modifying or erasing them.

Token based authentication - send ur credentials to authorisation server get the token , use the token to get the resource from resources server
token(stateless) is stored on client side unlike cookies(stateful)

//JWT -https://jwt.io/introduction/
https://logrocket.com/blog/jwt-authentication-best-practices/
JSON Web Token - JWT is created by authentication server and given to user.  JWT shouldn�t be stored in cookies.
For signed tokens payload information, though protected against tampering, is readable by anyone. Do not put secret information in the payload or header elements of a JWT unless it is encrypted.
Single Sign On feature widely uses JWT. U can also use JWT for securely transmitting information between parties (as the content will not be tampered and the sender is identified)
Single sign-on�(SSO) is a session and user authentication service that permits an end user to enter one set of login credentials (such as a name and password) and be able to access multiple applications.
JSON Web Tokens consist of three parts separated by dots (.), which are:
* Header - JSON - {
  "alg": "HS256",
  "typ": "JWT"
}
* Payload - JSON-  {
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true
}
* Signature  - HMACSHA256 (base64UrlEncode(header) + �.� +base64UrlEncode(payload),secret). Secret can be anything that is decided by developers 
Because JWTs can be signed you can be sure the senders are who they say they are.�
As the signature is calculated using the header and the payload, you can also verify that the content hasn't been tampered with.

Therefore, a JWT typically looks like the following.
xxxxx.yyyyy.zzzzz


$.ajax({
  url: URL,
  method: "GET",
  headers: {
    "Authorization":
      "Bearer JWT token returned by server�,
  },
}).then(function(response) {
  console.log(response);
}).catch(function(err) {
  console.error(err);
});


//authentication in SPAs
sessions
stateless JWT
stateful JWT