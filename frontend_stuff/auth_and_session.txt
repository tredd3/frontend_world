/ SESSION MANAGEMENT
https://medium.com/lightrail/getting-token-authentication-right-in-a-stateless-single-page-application-57d0c6474e3
https://stormpath.com/blog/token-auth-spa
https://www.appfoundry.be/blog/2018/11/24/session-management-in-react-single-page-applications/
Traditionally using cookies but ur app is vulnerable to XSS and CSRF attacks.
Also Cookies are primarily designed for web browsers and not for other types of clients such as native mobile applications or desktop programs.
Other limitations�are size of the cookie and access to user to for disabling, modifying or erasing them.

//Token based authentication
*token(stateless) is stored on client side unlike cookies(stateful)
*tokens should be short lived so that even though it is stolen it gets expired

//JWT -https://jwt.io/introduction/
https://logrocket.com/blog/jwt-authentication-best-practices/
JSON Web Token - JWT is created by authentication server and given to user.  JWT shouldn't be stored in cookies it should be stored in code
For signed tokens payload information, though protected against tampering, is readable by anyone.
so Do not put secret information in the payload or header elements of a JWT unless it is encrypted.
Single Sign On feature widely uses JWT. U can also use JWT for securely transmitting information between parties (as the content will not be tampered and the sender is identified)
JSON Web Tokens consist of three parts separated by dots (.), which are:
* Header - JSON - {
  "alg": "HS256",
  "typ": "JWT"
}
* Payload - JSON-  {
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true
}
* Signature  - HMACSHA256 (base64UrlEncode(header) + �.� +base64UrlEncode(payload),secret). Secret can be anything that is decided by developers 
Because JWTs can be signed you can be sure the senders are who they say they are.�
As the signature is calculated using the header and the payload, you can also verify that the content hasn't been tampered with.

Therefore, a JWT typically looks like the following.
xxxxx.yyyyy.zzzzz


$.ajax({
  url: URL,
  method: "GET",
  headers: {
    "Authorization":
      "Bearer JWT token returned by server�,
  },
}).then(function(response) {
  console.log(response);
}).catch(function(err) {
  console.error(err);
});


//SSO (single sign on) - users, identity providers and service providers (use access and refresh tokens)
*centralised login for distributed services
*Single sign-on(SSO) is a session and user authentication service that permits an end user to access 
multiple applications using one set of login credentials
*SSO is an abstract idea. Oauth and SAML are ways to implement SSO
*examples: use gmail to login to different apps, after logging into any of the google product no
need to enter credentials to login to other products

1)Oauth - API security model that relies on outside identity provider and key-store to grant and deny access to APIs
strictly speaking, OAuth is really an authorization standard, not an authentication standard
after user gives his consent client sends authorisation code sent by Oauth providers to authorisation server to get the token
use the token to get the resource from resources server
SSO = Oauth + access and refresh tokens
*OAuth allows an end user's account information to be used by third-party services, such as Facebook, without exposing the user's password.
*Facebook and Google are two OAuth providers that you might use to log into other internet sites.


2)Security Assertion Markup Language (SAML)
it is an open standard that allows identity providers (IdP) to pass authorization credentials to service providers (SP).
What that jargon means is that you can use one set of credentials to log into many different websites.
SAML uses XML to send Messages | OAuth uses JSON
SAML uses session cookie in a browser | OAuth uses API calls extensively 


//kerberos -  computer-network authentication protocol
 The Kerberos protocol uses strong cryptography so that a client can prove its identity to a server
(and vice versa) across an insecure network connection. After a client and server has used Kerberos 
to prove their identity, they can also encrypt all of their communications.

Kerberos has three parts: a client, server, and trusted third party (KDC) to mediate between them. 
Clients obtain tickets from the Kerberos Key Distribution Center (KDC), and they present these tickets
 to servers when connections are established. Kerberos tickets represent the client's credentials


//Passport is authentication middleware for Node.js.
