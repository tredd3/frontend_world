//networking basics
there are around 65535 ports. each port has a incoming and outgoing queue of messages
certain ports are reserved for services like http, ftp etc
each application runs on a single port

//http vs https
HTTP provides standard rules for web browsers & servers to communicate.
HTTP is an application layer network protocol which is built on top of TCP.
HTTPS: It is a combination of SSL/TLS protocol and HTTP. 
Transport Layer Security/Secure Sockets Layer, are cryptographic protocols designed to provide communications security over a computer network
https://www.guru99.com/difference-http-vs-https.html
https://developer.mozilla.org/en-US/docs/Web/HTTP


https://www.youtube.com/watch?v=vv4y_uOneC0
//Open System Interconnection Model | OSI 7 layers
data is transferred from one computer through all the layers and decapsulated at another computer 
A - application layer - used by network applications like browser. They use proctocols of this layer
like ftp,HTTP,smtp
P - presentaion - receives data(numbers and characters) from application layer.
translation to binary then compression then encryption (SSL protocol) and decryption at receiver computer
S - session - Authentication, authorisation, session management
session layer keeps track of which data packet belongs to which file and which application
T - transport - segmentation, flow and error control
segmentation - break data into segments and each segment has sequence number(to rearrange), port number(to identify application)
flow control - client tells server at what rate data transfer should happen so that client can process it and data is not lost
error control - corrupted(using checksum) and missing(using segment numbers) data are requested again 
TCP(www, email,ftp) and UDP protocols(songs,movies,games)
connection vs connection LESS
more size vs less size
slow vs fast
stream oriended vs message oriented
reliable vs unreliable

N - network - logical/ip adressing, routing, path determination
each segment is added with sender and destination ip address and the whole thing is called packet
routing - based on ip addressing + mask
path determination - uses the shortest path detemination protocols
D - data link - data unit in this layer is called frame. head consisits of souce and destination MAC address and tail is used for errors
media access control - this layer keeps an eye on shared media(ethernet/wifi) and once it is free it provides access to media to higher layers of OSI
physical addressing (mac address present in NIC)
P - physical - Binary data is converted into signals depending on the media (electrical signals for LAN, radio waves for wifi, light waves for optical fiber)


//Network Requests
ASCII characters - Codes 0 through 127 (all keyboard chars)
NON ASCII characters - Codes 128 through 255
x-www-form-urlencoded - to send simple text/ ASCII data
form-data - to send non-ASCII text or blob data like files and image uploading
Raw - if you want to send plain text /JSON/XML
Binary - non-textual data to the request, e.g. a video/audio file, images, or any other binary data file

REST Architecture - JSON ,CACHING, LESS BANDWIDTH,
API - programs built on different platforms and programming languages could exchange data in an easy manner.


// SERVER INTERACTION
By default,�HTTP�uses�port�80 and HTTPS uses�port�443
AJAX  uses XHR object and AJAX is used for partial page updates without full refresh.
AJAX - the process establishing a connection, sending request to server , getting the response and then updating the DOM
Fetch API - �Fetch API uses Promises, which enables a simpler and cleaner API, avoiding callback hell
API�stands for Application Programming Interface. It makes it possible to transfer data from an application to other applications.
REST APIs�uses multiple standards like HTTP, JSON, URL, and XML while SOAP�APIs�is largely based on HTTP and XML


//encoding vs encryption vs compression
*Encoding - Encoding is for maintaining data usability and can be reversed by employing the same algorithm that encoded the content, i.e. no key is used
used for reducing the size of audio and video files
Example: ASCII, BASE64, gzip 
*Encryption - maintaining data confidentiality and requires the use of a key (kept secret) to read it
*Compression - reduce the size of the data representation (gzip)
what is ASCII?  American Standard Code for Information Interchange, is a character encoding standard
The ASCII table has 128 characters, with values from 0 through 127.
 Thus, 7 bits are sufficient to represent a character in ASCII; however, most computers typically reserve 1 byte, (8 bits), for an ASCII character.
**What is Base 64 Encoded Data? each char represented by 6 bits
base64 encoded data is a string of character that contains only a-z, A-Z, 0-9, + and / characters and is often used in situations when sending non-text information via a text only transmission protocol.
The plain ASCII text includes a-z, A-Z, 0-9, ", %, &, ', (, ), *, +, -, _ and , (the comma). They will be referred to as the universal ASCII character set.
when trying to send e-mails in non English languages. Often these languages will have characters that are not part of the ASCII set.
 What is needed is a method to convert non-universal ASCII characters to a common form. This common form is called Base64 encoding.
**What does Base 64 Encoding Do?
Base 64 Encoding takes a stream of characters and converts them to characters that belong to the universal ASCII character set. 
Once a stream of characters has been converted to characters that belong to the universal ASCII character set (Base 64 encoded) 
they can be transported with ease over the Internet using the e-mail protocols.


********* HTTP ***********
//overview 
*application-layer protocol  for communication between web browsers and web servers,
application layer protocol that is sent over TCP, or over a TLS-encrypted TCP connection
*HTTP is a stateless protocol, meaning that the server does not keep any data (state) between two requests
i.e any 2 requests are completely independent of each other.
*Between the Web browser and the server, numerous computers and machines like proxies, modem and routers
*HTTP is simple(human readable messages), extensible(simple agreement between a client and a server about a new header's semantics),
stateless, but not sessionless - there is no link between two requests being successively carried out on the same connection.
HTTP cookies allow the use of stateful sessions
*Though HTTP doesn't require the underlying transport protocol to be connection-based; only requiring it to be reliable, or not lose messages
TCP is reliable and UDP isn't. HTTP therefore relies on the TCP standard, which is connection-based
*HTTP flow: Open a TCP connection, Send an HTTP message, Read the response sent by the server, Close or reuse the connection for further requests
*both XHR and Fetch API are based on HTTP
*headers convey additional information to browsers/servers.
*features controllable with HTTP: caching, origin constraint, Authentication(authentication header and cookie),
sessions(cookies),Proxy and tunneling, compression


//HTTP Headers
HTTP message format: start line(method+target_url+version) + headers + body (for both request and response)
General headers apply to both requests and responses, but with no relation to the data transmitted in the body.
Request headers contain more information about the resource to be fetched, or about the client requesting the resource.
Response headers hold additional information about the response, like its location or about the server providing it.
Entity headers contain information about the body of the resource, like its content length or MIME type.
body is not sent in requests fetching resources, like GET, HEAD, DELETE, or OPTIONS
Some requests send data to the server in order to update it: POST,PUT requests
End-to-end headers
These headers must be transmitted to the final recipient of the message: the server for a request, or the client for a response. Intermediate proxies must retransmit these headers unmodified and caches must store them.
Hop-by-hop headers
These headers are meaningful only for a single transport-level connection, and must not be retransmitted by proxies or cached
Accept-Charset - Which character encodings the client understands.
Accept-Encoding - The encoding algorithm that can be used on the resource sent back.
**Message body information
Content-Length(bytes), Content-Type and Content-Encoding
Via general header is added by proxies, both forward and reverse proxies


//HTTP Request Methods
GET -  retrieve data, cacheable
HEAD - identical to that of a GET request, but without the response body.
Such a request can be done before deciding to download a large resource to save bandwidth by reading Content-Length header
for invalidating cache if we are not sure of how frequent the resource on the server changes
POST - sends data to the server. The type of the body of the request is indicated by the Content-Type header.
application/x-www-form-urlencoded: the keys and values are encoded in key-value tuples separated by '&', with a '=' between the key and the value.
 Non-alphanumeric characters in both keys and values are percent encoded: 
this is the reason why this type is not suitable to use with binary data (use multipart/form-data instead)
multipart/form-data: each value is sent as a block of data ("body part"), with a user agent-defined delimiter ("boundary") separating each part. 
The keys are given in the Content-Disposition header of each part.
text/plain
PUT - replaces all current representations of the target resource with the request payload.
DELETE - deletes the specified resource.
CONNECT - establishes a tunnel to the server identified by the target resource.
proxy servers might need authority to create a tunnel. we can Proxy-Authorization header.
OPTIONS - used to describe the communication options for the target resource.
used for preflight, load balancing and security.
TRACE - performs a message loop-back test along the path to the target resource.
PATCH - used to apply partial modifications to a resource.


//HTTP status Codes
200 - success
301 - moved permanently
304 - not modified
307 (Temporary Redirect) and 308 (Permanent Redirect)
The Location response header indicates the URL to redirect a page to
4** - client error
400 - bad request
401 - unauthorised (not autheniticated)
403 - forbidden (unauthorised)
404 - not found
5** - server error
500 - Internal Server Error
501 - Not Implemented
502 - Bad Gateway
504 - Gateway Timeout

//Evolution of HTTP
**HTTP/1.1
currently browsers open up to 6 parallel connections under HTTP/1.1
open a separate TCP connection for each HTTP request/response pair

**HTTP/2
HTTP messages (before HTTP/2) are human-readable. With HTTP/2, these simple messages are encapsulated in
 frames, making them impossible to read directly, allowing optimizations like compression of headers and multiplexing.
HTTP/2 introduces an extra step: it divides HTTP/1.x messages into frames which are embedded in a stream.
Data and header frames are separated, this allows header compression. Several streams can be combined together,
a process called multiplexing, allowing more efficient underlying TCP connections.
multiplexing allows your Browser to fire off multiple requests at once on the same connection and receive the responses back in any order

**HTTP/3
will use QUIC(reliable UDP) instead TCP/TLS for the transport layer portion.

//HTTP caching - only GET requests
Private browser caches - specific to a user browser (preferred)
Shared proxy caches - popular resources are reused a number of times
Cache-Control: no-store //No caching
Cache-Control: no-cache //Cache but revalidate
pragma same as Cache-Control: no-cache, if the Cache-Control header field is omitted in a request. Use Pragma only for backwards compatibility with HTTP/1.0 clients
Cache-Control: public //response may be cached by any cache
Cache-Control: private //intended for a single user only and must not be stored by a shared cache
Cache-Control: max-age=31536000 //expiration
Cache-Control: must-revalidate //must verify the status of the stale resources before using it and expired ones should not be used
**freshness of cache
Cache-Control: "max-age=<seconds>"(relative to the time of the request) and EXPIRES header (random date and time)
cache validation - when the cache receives a request for a stale resource
it forwards this request with a If-None-Match request header with Etag value from previous request
if If-None-Match header value matches the Etag value at server then 304 not modified is sent else new response is sent
If-Modified-Since request header and Last-Modified response header
to check if it is in fact still fresh. If so, the server returns a 304 (Not Modified) header without sending the body of the requested resource, saving some bandwidth.
if neither header is present, look for a Last-Modified header
** serving content dynamically
When using the Vary: User-Agent header, caching servers should consider the user agent when deciding whether to serve the page from cache.
Because the User-Agent header value is different ("varies") for mobile and desktop clients, 
caches will not be used to serve mobile content mistakenly to desktop users or vice versa.


//HTTP Authentication
for server authentication:
WWW-Authenticate response header and Authorization request header
for proxy-server authentication:
Proxy-Authenticate response header and Proxy-Authorization request header
WWW-Authenticate: <type> realm=<realm>
Proxy-Authenticate: <type> realm=<realm>
<type> is the authentication scheme ("Basic" / "Bearer"). 
The realm is used to describe the protected area or to indicate the scope of protection.
Authorization: <type> <credentials>
Proxy-Authorization: <type> <credentials>
*Basic (base64-encoded username.password hence not secure) use it with https
we need to store the username and password somehow, in case they want to keep the user logged in after closing the app. 
You don’t want to store plaintext passwords, even on the client-side, as this can be exploited by XSS or CSRF
*Bearer (bearer tokens to access OAuth 2.0-protected resources)
let uname and pword be in the db. send POST request with username and password and get a token.
//if The token is randomly generated then it is mapped to the user in the central server (maintaining state) 
But in a distributed multiple-server environment, like a microservices architecture all the individual servers 
need to communicate with the central server.
//hence instead of using random tokens we use JWT which is cryptographically signed by server and
consists of info like user id and data so that multiple servers can decrypt and use the data instead of
asking central server about the user
The token can be invalidated without changing the password.
a single user can have multiple tokens ( one for the mobile app, another for the desktop app)


//FETCH API
1)fetch() allows you to make network requests similar to XMLHttpRequest (XHR) but Fetch API uses Promises, avoiding callback hell 
The response of a fetch() request is a Stream object, use the json() method to convert it into json
2)Timeouts Are Not Supported - request will continue for as long as the browser chooses.
function fetchTimeout(url, init, timeout = 3000) {
  return new Promise((resolve, reject) => {
    fetch(url, init)
      .then(resolve)
      .catch(reject);
    setTimeout(reject, timeout);
  }
}
Promise.race([
  fetch('http://url', { method: 'GET' }),
  new Promise(resolve => setTimeout(resolve, 3000))
])
3)cookies byfault don't go in a fetch request unlike XHR
4)Surprisingly, an HTTP error such as a 404 Page Not Found or 500 Internal Server Error does
 not cause the Fetch Promise to reject
5)abort the fetch request 
const controller = new AbortController();
Fetch can be aborted by calling controller.abort();
6)IE doesn't suppor fetch it needs a polyfill
**fetch modes
1)same-origin only succeeds for requests for assets on the same origin, all other requests will reject.
2)cors will allow requests for assets on the same-origin and other origins which return the appropriate CORs headers.
cors response restricts the headers you can view to `Cache-Control`, `Content-Language`, `Content-Type`, `Expires`, `Last-Modified`, and `Pragma`.
3)cors-with-forced-preflight will always perform a preflight check before making the actual request.
4)no-cors is intended to make requests to other origins that do not have CORS headers and result in an opaque response(u can't view),
 but as stated, this isn't possible in the window global scope at the moment but servie workers suopport


//Cross-Origin Resource Sharing (CORS)
In CORS, a preflight request with the OPTIONS method is sent, so that the server can respond whether it
 is safe to send the request with these parameters or is the server ready to accept the request at this point
Access-Control-Request-Method header notifies the server as part of a preflight request that when the 
actual request is sent, it will be sent with a POST request method. The Access-Control-Request-Headers
The server responds with Access-Control-Allow-Origin, Access-Control-Allow-Methods, Access-Control-Allow-Headers
Access-Control-Max-Age gives the value in seconds for how long the response to the preflight request can be cached for without sending another preflight request


//JSONP stands for JSON with Padding
Requesting a file from another domain using XHR can cause problems, due to cross-domain policy. 
Requesting an external script from another domain does not have this problem.
JSONP uses this advantage, and request files using the script tag instead of the XHR object.


//IFRAME
An inline frame is used to embed another document within the current HTML document.
like embedding a google map and youtube video
iframe to main window communication is via post message
