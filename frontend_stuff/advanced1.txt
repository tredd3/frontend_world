//ADVANCED1

//dealing with images or files
Arraybuffer is an array of raw binary data. It can only be accessed by using blob type.
Use FileReader to read that file (create a url mapping to that file)and load it into the page and/or localStorage using the url read.


//source map
Source map is used for debugging transpiled/minified files in production or transpiled files in development.
Source map is a json file (filename.js.map)which is generated using build and other tools like web pack etc which contains info of  what all files are transpiled/minified in to one.
sorucemappingurl directive is added by web pack at the end of minified/transpiled file with the info of original files.
On opening dev tools if source maps option is enabled in the browser settings then browser will look for sourcemappingurl in the minified file
And based on that it will fetch/download the corresponding original files which can be used for debugging.
If it is a secure site like banking or u want to protect the code from others use fiddler.


//go through all these links
https://serverless-stack.com/chapters/code-splitting-in-create-react-app.html
https://medium.freecodecamp.org/beginners-guide-to-react-router-4-8959ceb3ad58
https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95
https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d
https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/


https://spec.json5.org/#arrays
file format: file xyz.json, new file xyz.json5
usage: https://www.npmjs.com/package/json5
The JSON5 Data Interchange Format (JSON5) is a superset of JSON that aims to alleviate some of the limitations of JSON by expanding its syntax
Summary of Features
The following ECMAScript 5.1 features, which are not supported in JSON, have been extended to JSON5.
Objects:
Object keys may be an ECMAScript 5.1 IdentifierName.
Objects may have a single trailing comma.
Arrays:
Arrays may have a single trailing comma.
Strings:
Strings may be single quoted.
Strings may span multiple lines by escaping new line characters.
Strings may include character escapes.
Numbers:
Numbers may be hexadecimal.
Numbers may have a leading or trailing decimal point.
Numbers may be IEEE 754 positive infinity, negative infinity, and NaN.
Numbers may begin with an explicit plus sign.
Comments:
Single and multi-line comments are allowed.
White Space
Additional white space characters are allowed.

Example (Informative)
{
  // comments
  unquoted: 'and you can quote me on that',
  singleQuotes: 'I can use "double quotes" here',
  lineBreaks: "Look, Mom! \
No \\n's!",
  hexadecimal: 0xdecaf,
  leadingDecimalPoint: .8675309, andTrailing: 8675309.,
  positiveSign: +1,
  trailingComma: 'in objects', andIn: ['arrays',],
  "backwardsCompatible": "with JSON",
}