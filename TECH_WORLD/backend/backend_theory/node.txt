/node courses
https://www.youtube.com/watch?v=TlB_eWDSMt4
https://codewithmosh.com/p/the-complete-node-js-course


//NODE JS - running js outside browser environment
node is a C++ program which includes V8 (Chrome JavaScript engine)
event-driven, non-blocking I/O model that makes it lightweight and efficient
I/O - interaction with the system's disk and network (including database and hardware access)
in simple words anything which goes outside of the process(RAM) and CPU combination is referred to I/O
to handle I/O u need to make system calls
perfect for data-intensive real-time applications that run across distributed devices
Node.js frameworks -  express, sails
Package - bunch of modules
Socket.io is  web socket library 
Blocking - Node.js process must wait until a non-JavaScript operation completes
but JavaScript that exhibits poor performance due to being CPU intensive code is not referred as blocking
Blocking methods execute synchronously and non-blocking methods execute asynchronously.
Asynchronous execution - code that not running at same time or with same speed
https://www.sitepoint.com/build-a-simple-web-server-with-node-js/
used in projects : real time(chat, live updates), scalable, I/O intensive, REST API(microservice)
not to be used in projects: cpu intensive


//V8 Engine
V8 first generates an abstract syntax tree with its own parser. 
Then, Ignition, the V8 interpreter, generates bytecode from this syntax tree using the internal V8 bytecode format
TurboFan is the V8 optimizing compiler, it takes this bytecode and generates machine code from it.
V8 compiles JavaScript directly to native machine code using just-in-time compilation before executing it. 
The compiled code is additionally optimized (and re-optimized) dynamically at runtime
JIT compilation combines the speed of compiled code with the flexibility of interpretation


//node syntax
/REPL - read eval printloop - virtual env to run js in terminal (type node and press enter in terminal to open REPL)
/global instead of window object
/every file is a module. all the vars and fns defined in a module is available only inside it
/module.exports is {} 
/ngnix vs node 
*node provides ssl encryption, gzip, web server and other functionalties which ngnix provides.
but ngnix takes less amount of time and space to perform these ops compared to node
*node app should focus on business logic and all these genric functionalty overhead should be
given to proxy server 
*we can also configure organisation level configuration in ngnix instead of rewriting and 
maintaining at application level.

//log files in node
node --trace-events-enabled --trace-event-categories v8,node server.js
Running Node.js with tracing enabled will produce log files that can be opened in the chrome://tracing tab of Chrome.
https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/
phases/ticks:timers,I/O callbacks,(idle, prepare),poll,check, close callbacks
cycle: all the above ticks together form a phase
/setImmediate() method is called in the poll phase and itâ€™s callback functions are invoked in the check phase, i.e after poll phase of event loop completes.
/process.nextTick() technically not part of the event loop. Instead, the nextTickQueue will be processed after 
the current operation in stack completes, regardless of the current phase of the event loop.
all callbacks passed to process.nextTick() will be resolved before the event loop continues.
/The main advantage to using setImmediate() over setTimeout() is setImmediate() will always be executed
 before any timers if scheduled within an I/O cycle, independently of how many timers are present.


********* working of node ***********
/A Node.js app is run in a single process, without creating a new thread for every request.
/When Node.js performs an I/O operation, like reading from the network, accessing a database or the filesystem, 
instead of blocking the thread and wasting CPU cycles waiting, Node.js will resume the operations when the response comes back.
/This allows Node.js to handle thousands of concurrent connections with a single server without introducing the burden of managing 
thread concurrency, which could be a significant source of bugs.
/features node can be used for: http server, server side rendering, APIs, real time stuff like web sockets

/you can also enable specific ES6 experimental features by running Node.js with flags.
/JavaScript is generally considered an interpreted language, but modern JavaScript engines no longer just interpret JavaScript, they compile it.
/JavaScript is internally compiled by V8 with just-in-time (JIT) compilation to speed up the execution.


******* node debugging *********
https://nodejs.org/en/docs/guides/debugging-getting-started/
https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27
https://github.com/GoogleChromeLabs/ndb

ndb has some powerful features exclusively for Node.js:
1)Child processes are detected and attached to.
2)You can place breakpoints before the modules are required.
3)You can edit your files within the UI. On Ctrl-S/Cmd-S, DevTools will save the changes to disk.
4)By default, ndb blackboxes all scripts outside current working directory to improve focus.

//using ndb
1)cd to your project folder (with a package.json)
example cd in to projects/nodejs_crash_course 
now run (npm run debug)