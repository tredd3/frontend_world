https://docs.mongodb.com/manual/
learn for free - https://university.mongodb.com/
Nosql database - Document based
MongoDB offers both a Community and an Enterprise version of the database:
Community edision is free
MongoDB Enterprise adds enterprise-focused features such as LDAP and Kerberos support, on-disk encryption, and auditing.
use cases: big data, real-time (bcoz of the strong consistency property when you read from primary)
when you are reading from a secondary-replica MongoDB becomes Eventually Consistent.
MongoDB gets high availability through Replica-Sets
But during primary failover every write that was performed by the old primary, but not synchronized to the secondaries will be 
rolled back and saved to a rollback-file -  gives importance to consistency over availability

Components:
mongod - The database server.
mongos - Sharding router.
mongo - The database shell (uses interactive javascript).

MongoDB Atlas Database:
https://www.mongodb.com/cloud/atlas
Cloud DBaaS for MongoDB -  requires no installation overhead and offers a free tier to get started.
The Easiest Way to Deploy, Operate, and Scale MongoDB in the Cloud in Just a Few Clicks.

3 diff ways of accessing MongoDB
terninal- https://docs.mongodb.com/manual/reference/mongo-shell/
MongoDB Compass, the GUI for MongoDB
program/code - need to use drivers in ur code to connect to DB server
https://docs.mongodb.com/manual/applications/drivers/. Use the shell (mongo) for administrative tasks.


Key Features:
--High Performance
Support for embedded data models reduces I/O activity on database system.
Indexes support faster queries and can include keys from embedded documents and arrays.
--Rich Query Language
to support read and write operations (CRUD), Data Aggregation and Text Search 
--High Availability: MongoDB's replication facility, called replica set, provides: automatic failover and data redundancy.
A replica set is a group of MongoDB servers that maintain the same data set, providing redundancy and increasing data availability.
--Horizontal Scalability(part of its core functionality)
Sharding distributes data across a cluster of machines
 MongoDB supports creating zones of data based on the shard key. In a balanced cluster, MongoDB directs reads and writes covered 
 by a zone only to those shards inside the zone.
--MongoDB supports multiple storage engines:
WiredTiger Storage Engine (including support for Encryption at Rest)
In-Memory Storage Engine.
In addition, MongoDB provides pluggable storage engine API that allows third parties to develop storage engines for MongoDB.


------concepts---------
one Mongo server can tackle multiple databases and one can database stores one or more collections of documents.
-Naming restrictions: 
Database names cannot contain /\. "$ , case insensitive , length < 64 characters,
--- Collections ---
Collection names should begin with an underscore or a letter character, cannot contain ."$
Collections are assigned an immutable UUID. The collection UUID remains the same across all members of a replica set and shards in a sharded cluster.
--- Documents ---
-MongoDB 5.0 adds improved support for field names that are ($) prefixed or that contain (.) characters,need to use helper methods
 like $getField, $setField, and $literal in queries that access those fields as they are not directly accessible
- MongoDB stores data records as BSON documents. BSON is a binary representation of JSON documents, though it contains more data types than JSON.
-A record in MongoDB is a document, which is a data structure composed of field and value pairs
-Field names are strings
-The value of a field can be any of the BSON data types, including other documents, arrays, and arrays of documents.
-The advantages of using documents are:
Documents (i.e. objects) correspond to native data types in many programming languages.
Embedded documents and arrays reduce need for expensive joins.
Dynamic schema supports fluent polymorphism.
-GridFS is a specification for storing and retrieving files that exceed the BSON-document size limit of 16 MB.
--- _id field (primary key)--
The field name _id is reserved for use as a primary key; its value must be unique in the collection, is immutable, and may 
be of any type other than an array. If the _id contains subfields, the subfield names cannot begin with a ($) symbol.
The _id field is always the first field in the documents. If the server receives a document that does not have the _id field first,
 then the server will move the field to the beginning.
if the client sends a document without an _id field, the mongod will add the _id field and generate the ObjectId.
//All write(insert/update/delete) operations in MongoDB are atomic on the level of a single document and not on a collection.
atomicity means either all operations on a single document is done/suspended but cannot be partial
if u want atomicity on all the documents while handling multiple documents, use multi document transactions

//Installation
https://docs.mongodb.com/v5.0/tutorial/install-mongodb-on-os-x/
The installation includes the following binaries in the same folder where mongo is installed: mongod server,
 mongos(sharded cluster query router), mongosh(database shell that uses interactive javascript to interact with mongodb)
you can use the mongo shell to query and update data as well as perform administrative operations.
the installation creates the following files and directories at the location for mac
configuration file - /usr/local/etc/mongod.conf
log directory - /usr/local/var/log/mongodb
data directory - /usr/local/var/mongodb
To run MongoDB (i.e. the mongod process) as a macOS service(Recommended):
start: brew services start mongodb-community@5.0
stop: brew services stop mongodb-community@5.0
To run MongoDB (i.e. the mongod process) manually as a background process, run:
mongod --config /usr/local/etc/mongod.conf --fork
To stop a mongod running as a background process, connect to the mongod using mongosh, and issue the shutdown command as needed.

