//Mozilla uses merge sort.
//chrome uses QuickSort and InsertionSort, for smaller arrays
//latest versions of chrome use timsort = merge+insertion sort
//Webkit implements some variation of quick-sort (Intro Sort)for numeric arrays . For non-numeric array, it uses merge-sort.

//Some algorithms (selection, bubble, heapsort) work by moving elements to their final position, 
one at a time. You sort an array of size N, put 1 item in place, and continue sorting an array of size N – 1

//Some algorithms (insertion, quicksort, counting, radix) put items into a temporary position, close(r) 
to their final position. You rescan, moving items closer to the final position with each iteration.

//which algo to use depends on
algorithmic complexity, startup costs, additional space requirements, input size, use of recursion 
(function calls are expensive and eat stack space), worst-case behavior, assumptions about input data, 
caching, and behavior on already-sorted or nearly-sorted data

//O(N) clearly is the minimum sorting time possible, since we must examine every element at least once 

//Selection Sort [Best/Worst: O(N^2)]
Scan all items and find the smallest. Swap smallest element with the first item. Repeat the selection sort on the remaining N-1 items

//Bubble Sort [Best: O(N), Worst:O(N^2)]
Starting on the left, compare adjacent items and keep “bubbling” the larger one to the right (it’s in its final place). Bubble sort the remaining N -1 items

//Insertion Sort [Best: O(N), avg:O(N^2) Worst:O(N^2)]
the no.of comparisons and shifts are lot lesser than selection and bubble sort and hence better than both.
Start with a sorted list of 1 element on the left, and N-1 unsorted items on the right. 
Take the first unsorted item (element #2) and insert it into the sorted list, moving elements as necessary. 
We now have a sorted list of size 2, and N -2 unsorted elements. 
*if the array is partially or already substantially sorted, insertion sort will shine even brighter than quick sort
*for smaller arrays quite efficient. O(n * k), where k is the steps it needs to tread back up the array to swap the previous element with the current one

//Quicksort [Best: O(N Lg N), Avg: O(N Lg N), Worst:O(N^2)]
quicksort's efficiency relies on two factors--its pivot or partitioned element 
*If the array is partially or substantially sorted, and/or the pivot element is chosen in a way that 
it is closer to the start or end of the array, it can easily degrade to O(n * n)
*worst case is always avoided and almost all languages using this sort by using randomised version


//Heapsort [Best/Avg/Worst: O(N Lg N)] - in-place algorithm, but it is not a stable sort.
Add all items into a heap. Pop the largest item from the heap and insert it at the end (final position). Repeat for all items.
Creating the heap is O(N lg N). Popping items is O(1), and fixing the heap after the pop is lgN.
There are N pops, so there is another O(N lgN) factor, which is O(N lg N) overall.

//Merge Sort
it is useful for sorting linked lists in O(nLogn) time.
Q: Why merge sort is considered preferable than quick sort in some cases?
A: When the data set is huge and is stored on external devices such as a hard drive, merge sort is the clear winner in terms of speed.

//Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists?
*Quick Sort in its general form is an in-place sort (i.e. it doesn’t require any extra storage) whereas merge sort requires O(N) extra storage for array
*Unlike array, in linked list, we can insert items in the middle in O(1) extra space and O(1) time.
Therefore merge operation of merge sort can be implemented without extra space for linked lists.
*quicksort needs random access(suitable for array) and Merge sort accesses data sequentially(suitable for linked list)
*Merge sort is better for large data structures: Mergesort is a stable sort (preserves the order of 
elements if the 2 elements are same), unlike quicksort and heapsort

//internal sort vs external sort
internal sort - all elements/records are in RAM
external sort - elements/records are on disk (because of large data all the records can't be put in RAM in one go)

//recursive and non-recursive 
recursive - quick sort and merge sort
non-recursive - insertion and selection