//python and its features

Features: 
high level programming language
used for  developing both desktop(GUI), web applications,desktop and mobile apps, games, automation
AI , ML and (data analysis and visualization)
A website - mostly consists of static content. It is publicly accessible to all the visitors.Read only and information display purpose
A web application - advanced form of a website with heavy user interactions, customizations, authentication and user specific content/actions
https://achievion.com/blog/how-is-a-web-application-different-than-a-website.html
support various concepts in functional and aspect-oriented programming
dynamic type system and automatic memory management
interpreted programming language - allows you to you to run the same code on multiple platforms without recompilation
Robust Standard Library - u can choose from available modules without writing additional code
Python Package Index (pypi.org) is a directory of Python packages published by Python developers around the world. 
 We use pip to install or uninstall these packages.
  pip install openpyxl
  pip uninstall openpyxl
For instance, while writing a web application in Python, you can use specific modules to implement web services, perform string 
  operations, manage operating system interface or work with internet protocols. 
Many Open Source Frameworks and Tools:
Likewise, you can accelerate desktop GUI application development using Python GUI frameworks and toolkits like PyQT, PyJs, PyGUI, Kivy, PyGTK and WxPython.
For instance, you can simplify and speedup web application development by using robust Python web frameworks like Django, Flask, Pyramid

Downsides:
Python is slower than several widely used programming languages including Java and C++. 
You have to speed up the Python application by making changes to the application code or using custom runtime.

//working of python - both compiled and interpreted
python source code - compiler - python byte code - python virtual machine(interpreter/software) - interpreted to machine dependent code
The .py source code is first compiled to byte code as .pyc and later on the byte code used to get interpreted.
Because .pyc files are platform independent, they can be shared across machines of different architectures.
Loading:
 .pyc files (__pycache__) needs to be in .gitignore
 To speed up the loading of the imported module in the future, the interpreter creates a bytecode file of the module, when the
   module is imported in any file
 Note that using .pyc files only speeds up the loading of your program, not the actual execution of it. 
 when python interpreter is run in optimiser mode , .pyo bytecode file is created, it substitutes for the .pyc file that would 
    have been created without optimization. (python -O <fine_name>) - optimiser creates smaller byte code files hence .pyo is smaller compared to its .pyc counterpart
 When the source code file is updated, the .pyo/.pyc file is updated whenever the update time for the source code differs from that of the bytecode file. 
 you can improve startup time by writing your main program in a module that gets imported by another, smaller module. 
Execution: check python_cmdline.txt 
Note: algorithm and data stucture 


//python 
/python -c command [arg] - which executes the statement(s) in command - quote command in its entirety with single quotes.
Some Python modules are also useful as scripts. These can be invoked using python -m module [arg] 
which executes the source file for module as if you had spelled out its full name on the command line.
When a script file is used, it is sometimes useful to be able to run the script and enter interactive mode afterwards. This can be done by passing -i before the script.
/When known to the interpreter, the script name and additional arguments thereafter are turned into a list of strings and assigned to the argv variable in the sys module.
import sys. The length of the list is at least one; acces using sys.argv[i] 
/Source Code Encoding -UTF 8, standard library only uses ASCII characters

//implementations
python - defines set of rules 
cpython - C is the default language used to implement the rules
other implementations: jpython(java), ironpython(c#) and pypy
jpython - java code can be embedded in python code, similarly for ironpython c# code can be embedded.
if jpython is used then the source code is converted to java byte code and JVM is used for machine code conversion


//tool kit
1)IDE: vscode - pylint, pep8 formatting, autoformat on save , code runner
2)IPython(Interactive python): powerful command shell for interactive computing using python 
IPython provides a rich architecture for interactive computing with:
A powerful interactive shell.
A kernel for Jupyter.
Support for interactive data visualization and use of GUI toolkits.
Flexible, embeddable interpreters to load into your own projects. Easy to use, high performance tools for parallel computing.
3)As of IPython 4.0, the language-agnostic parts of the project: the notebook format, message protocol, qtconsole,
 notebook web application, etc have moved to new projects under the name Jupyter.
With the release of IPython 4.0, the parallel computing capabilities were made optional and released under the ipyparallel python package.
4)JupyterLab is the next generation of the Jupyter Notebook.
JupyterLab uses the exact same Notebook server and file format as the classic Jupyter Notebook, so that it is fully compatible with the existing notebooks and kernels.
Open Jupyter stuff
jupyter --version #u will get all the available tools
jupyter-notebook #to open jupyter notebook web instance
jupyter lab #to open jupyter lab web instance

https://www.geeksforgeeks.org/underscore-_-python/

//PEP - Python Enhancement Proposal (like W3C for Javascript)
https://github.com/python/peps - PEPs are maintained as text files in a versioned repository
PEP is a design document providing information to the Python community, or describing a new feature for Python or its 
 processes or environment.  The PEP should provide a concise technical specification of the feature and a rationale for the feature.
PEP 8 is a coding convention, a set of recommendations, about how to write your Python code more readable.
primary audience for PEPs are the core developers of the CPython reference interpreter , JPython and other interpreters