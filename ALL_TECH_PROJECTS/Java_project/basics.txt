//Java Development Kit
We use Java Development Kit (JDK) to build Java applications. JDK contains a compiler, the Java Runtime Environment (JRE) 
and a library of classes that we use to build applications. Java Runtime Environment (JRE) has software component called 
JVM (Java virtual machine), JRE also takes care of garbage collection of unused references types


//Java Editions
We have four editions of Java, each used for building a different type of
application:
• Java Standard Edition (SE): the core Java platform. It contains all of the
libraries that every Java developer must learn.
• Java Enterprise Edition (EE): used for building very large scale,
distributed systems. It’s built on top of Java SE and provides additional
libraries for building fault-tolerant, distributed, multi-tier software.
• Java Micro Edition (ME): a subset of Java SE, designed for mobile
devices. It also has libraries specific to mobile devices.
• Java Card: used in smart cards. 

//Architecture of Java Applications 
The smallest building blocks in Java programs are methods (also called functions in other programming languages).
We combine related methods in classes, and related classes in packages. This modularity in Java allows us to break down
large programs into smaller building blocks that are easier to understand and re-use. 


//How Java Code Gets Executed
compilation _ execution
The Java compiler takes Java code and compiles it down to Java Bytecode which is a cross-platform format(platform independent).
When we run Java applications, Java Virtual Machine (JVM) gets loaded in the memory. It takes our bytecode as the input and 
translates it to the native code for the underlying operating system(Windows/Mac/Linux etc). 
There are various implementations of Java Virtual Machine for almost  all operating systems. 
javac <java_file>
e.g: javac Main.java => results in Main.class (which contains java byte code)
This java byte code can run in any machine that has Java Run time environment
java  <full_path_to_class_file> //invokes JVM, picks the .class file corresponding to the java class and runs the java byte code
e.g: java com.tarak.Main //running a Main class file present in com/tarak package
java -jar pack.jar //running a jar file using JVM


//What is a Jar file https://www.geeksforgeeks.org/jar-files-java/
JAR file is a file format based on the popular ZIP file format and is used for aggregating many class files and resources into one,
to distribute application software or libraries on the Java platform. 
A JAR file is essentially a zip file that contains an optional META-INF directory. A JAR file can be created by the 
command-line jar tool, or by using the java.util.jar API in the Java platform.
jar cf <jarfilename> <package_name> // cretae a jar file
jar tf jarfilename // view a jar file content
java -jar pack.jar //running a jar file using JVM


//Is functional programming possible in Java?
Lambda Expression and functional interface in Java is introduced so that functional programming can be more easily adopted in Java.
Using Lambda expression, we can mimic the functional programming syntax of assigning a method to a variable or passing it to a parameter.


//program concepts
main method should always be static , you don't have to call it explicitly JVM will call it for you
import java.io.*;
  
class GFG {
    public static void main(String[] args)
    {
        System.out.println("Welcome");
        System.out.println("To");
        System.out.println("GeeksforGeeks");
    }
}

use semi-colon to terminate a statement like javascript
// - for comments like javascript
